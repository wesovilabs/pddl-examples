---------
metricff
---------

ff: parsing domain file
domain 'HOSPITAL-AMBULANCE-PATIENT' defined
 ... done.
ff: parsing problem file
problem 'PATIENT-WATING-TO-BE-ATTENDED' defined
 ... done.


no metric specified. plan length assumed.

checking for cyclic := effects --- OK.

ff: search configuration is EHC, if that fails then  best-first on 1*g(s) + 5*h(s) where
    metric is  plan length

Cueing down from goal distance:   16 into depth [1][2]
                                  15            [1]
                                  14            [1]
                                  13            [1][2][3]
                                  12            [1][2]
                                  11            [1][2]
                                  10            [1][2][3][4]
                                   9            [1]
                                   8            [1][2][3]
                                   7            [1][2]
                                   6            [1]
                                   5            [1][2][3]
                                   4            [1][2][3]
                                   3            [1]
                                   2            [1]
                                   1            [1]
                                   0

ff: found legal plan as follows

step    0: MOVE AMBULANCE1 LOC2 LOC1
        1: PICK AMBULANCE1 PATIENT1 LOC1
        2: MOVE AMBULANCE1 LOC1 LOC2
        3: MOVE AMBULANCE1 LOC2 LOC3
        4: MOVE AMBULANCE1 LOC3 LOC6
        5: MOVE AMBULANCE1 LOC6 LOC7
        6: DROP AMBULANCE1 PATIENT1 LOC7
        7: MOVE AMBULANCE1 LOC7 LOC5
        8: PICK AMBULANCE1 PATIENT4 LOC5
        9: MOVE AMBULANCE1 LOC5 LOC4
       10: MOVE AMBULANCE1 LOC4 LOC3
       11: MOVE AMBULANCE1 LOC3 LOC6
       12: MOVE AMBULANCE1 LOC6 LOC7
       13: DROP AMBULANCE1 PATIENT4 LOC7
       14: MOVE AMBULANCE1 LOC7 LOC6
       15: PICK AMBULANCE1 PATIENT5 LOC6
       16: MOVE AMBULANCE1 LOC6 LOC7
       17: DROP AMBULANCE1 PATIENT5 LOC7
       18: MOVE AMBULANCE1 LOC7 LOC6
       19: MOVE AMBULANCE1 LOC6 LOC3
       20: PICK AMBULANCE1 PATIENT2 LOC3
       21: MOVE AMBULANCE1 LOC3 LOC4
       22: MOVE AMBULANCE1 LOC4 LOC5
       23: MOVE AMBULANCE1 LOC5 LOC7
       24: DROP AMBULANCE1 PATIENT2 LOC7
       25: MOVE AMBULANCE1 LOC7 LOC5
       26: MOVE AMBULANCE1 LOC5 LOC4
       27: PICK AMBULANCE1 PATIENT3 LOC4
       28: MOVE AMBULANCE1 LOC4 LOC5
       29: MOVE AMBULANCE1 LOC5 LOC7
       30: DROP AMBULANCE1 PATIENT3 LOC7


time spent:    0.00 seconds instantiating 35 easy, 14 hard action templates
               0.00 seconds reachability analysis, yielding 24 facts and 24 actions
               0.00 seconds creating final representation with 24 relevant facts, 0 relevant fluents
               0.00 seconds computing LNF
               0.00 seconds building connectivity graph
               0.00 seconds searching, evaluating 48 states, to a max depth of 4
               0.00 seconds total time



---------
SMTPlan
---------
Grounded:	0.003754 seconds
Algebra:	0.000035 seconds
Encoded 1:	0.002074 seconds
Solved 1:	0.000827 seconds
Encoded 2:	0.001107 seconds
Solved 2:	0.001248 seconds
Encoded 3:	0.001529 seconds
Solved 3:	0.002388 seconds
Encoded 4:	0.001025 seconds
Solved 4:	0.005063 seconds
Encoded 5:	0.001105 seconds
Solved 5:	0.007604 seconds
Encoded 6:	0.000873 seconds
Solved 6:	0.014248 seconds
Encoded 7:	0.000906 seconds
Solved 7:	0.017154 seconds
Encoded 8:	0.000880 seconds
Solved 8:	0.020290 seconds
Encoded 9:	0.000966 seconds
Solved 9:	0.024283 seconds
Encoded 10:	0.000885 seconds
Solved 10:	0.028629 seconds
Encoded 11:	0.000892 seconds
Solved 11:	0.033257 seconds
Encoded 12:	0.000922 seconds
Solved 12:	0.037588 seconds
Encoded 13:	0.000812 seconds
Solved 13:	0.043271 seconds
Encoded 14:	0.000824 seconds
Solved 14:	0.048497 seconds
Encoded 15:	0.000918 seconds
Solved 15:	0.054796 seconds
Encoded 16:	0.000868 seconds
Solved 16:	0.063637 seconds
Encoded 17:	0.000989 seconds
Solved 17:	0.073791 seconds
Encoded 18:	0.000931 seconds
Solved 18:	0.085563 seconds
Encoded 19:	0.000907 seconds
Solved 19:	0.100246 seconds
Encoded 20:	0.000911 seconds
Solved 20:	0.115509 seconds
Encoded 21:	0.000935 seconds
Solved 21:	0.137981 seconds
Encoded 22:	0.000926 seconds
Solved 22:	0.168280 seconds
Encoded 23:	0.001199 seconds
Solved 23:	0.209378 seconds
Encoded 24:	0.000906 seconds
Solved 24:	0.261165 seconds
Encoded 25:	0.000970 seconds
Solved 25:	0.327155 seconds
Encoded 26:	0.000912 seconds
Solved 26:	0.416445 seconds
Encoded 27:	0.000872 seconds
0.0:	(move ambulance1 loc2 loc1) [0.0]
2.0:	(pick ambulance1 patient1 loc1) [0.0]
4.0:	(move ambulance1 loc1 loc2) [0.0]
6.0:	(move ambulance1 loc2 loc3) [0.0]
8.0:	(move ambulance1 loc3 loc6) [0.0]
10.0:	(move ambulance1 loc6 loc7) [0.0]
12.0:	(drop ambulance1 patient1 loc7) [0.0]
14.0:	(move ambulance1 loc7 loc5) [0.0]
16.0:	(pick ambulance1 patient4 loc5) [0.0]
18.0:	(move ambulance1 loc5 loc7) [0.0]
20.0:	(drop ambulance1 patient4 loc7) [0.0]
22.0:	(move ambulance1 loc7 loc5) [0.0]
24.0:	(move ambulance1 loc5 loc4) [0.0]
26.0:	(pick ambulance1 patient3 loc4) [0.0]
28.0:	(move ambulance1 loc4 loc5) [0.0]
30.0:	(move ambulance1 loc5 loc7) [0.0]
32.0:	(drop ambulance1 patient3 loc7) [0.0]
34.0:	(move ambulance1 loc7 loc6) [0.0]
36.0:	(pick ambulance1 patient5 loc6) [0.0]
38.0:	(move ambulance1 loc6 loc7) [0.0]
40.0:	(drop ambulance1 patient5 loc7) [0.0]
42.0:	(move ambulance1 loc7 loc6) [0.0]
44.0:	(move ambulance1 loc6 loc3) [0.0]
46.0:	(pick ambulance1 patient2 loc3) [0.0]
48.0:	(move ambulance1 loc3 loc6) [0.0]
50.0:	(move ambulance1 loc6 loc7) [0.0]
52.0:	(drop ambulance1 patient2 loc7) [0.0]
Solved 27:	0.483214 seconds
Total time:	2.870474 seconds


---------
fd
---------
INFO     Running translator.
INFO     translator stdin: None
INFO     translator time limit: None
INFO     translator memory limit: None
INFO     translator command line string: /usr/bin/python3 /src/fd/builds/release/bin/translate/translate.py /var/data/domain.pddl /var/data/problem.2.pddl --sas-file output.sas
Parsing...
Parsing: [0.000s CPU, 0.012s wall-clock]
Normalizing task... [0.000s CPU, 0.000s wall-clock]
Instantiating...
Generating Datalog program... [0.000s CPU, 0.000s wall-clock]
Normalizing Datalog program...
Normalizing Datalog program: [0.000s CPU, 0.003s wall-clock]
Preparing model... [0.010s CPU, 0.001s wall-clock]
Generated 24 rules.
Computing model... [0.000s CPU, 0.002s wall-clock]
109 relevant atoms
95 auxiliary atoms
204 final queue length
224 total queue pushes
Completing instantiation... [0.000s CPU, 0.001s wall-clock]
Instantiating: [0.010s CPU, 0.008s wall-clock]
Computing fact groups...
Finding invariants...
8 initial candidates
Finding invariants: [0.000s CPU, 0.001s wall-clock]
Checking invariant weight... [0.000s CPU, 0.000s wall-clock]
Instantiating groups... [0.000s CPU, 0.000s wall-clock]
Collecting mutex groups... [0.000s CPU, 0.000s wall-clock]
Choosing groups...
0 uncovered facts
Choosing groups: [0.000s CPU, 0.000s wall-clock]
Building translation key... [0.000s CPU, 0.000s wall-clock]
Computing fact groups: [0.000s CPU, 0.002s wall-clock]
Building STRIPS to SAS dictionary... [0.000s CPU, 0.000s wall-clock]
Building dictionary for full mutex groups... [0.000s CPU, 0.000s wall-clock]
Building mutex information...
Building mutex information: [0.000s CPU, 0.000s wall-clock]
Translating task...
Processing axioms...
Simplifying axioms... [0.000s CPU, 0.000s wall-clock]
Processing axioms: [0.000s CPU, 0.000s wall-clock]
Translating task: [0.000s CPU, 0.001s wall-clock]
0 effect conditions simplified
0 implied preconditions added
Detecting unreachable propositions...
0 operators removed
0 axioms removed
2 propositions removed
Detecting unreachable propositions: [0.000s CPU, 0.001s wall-clock]
Reordering and filtering variables...
7 of 7 variables necessary.
5 of 7 mutex groups necessary.
26 of 26 operators necessary.
0 of 0 axiom rules necessary.
Reordering and filtering variables: [0.000s CPU, 0.000s wall-clock]
Translator variables: 7
Translator derived variables: 0
Translator facts: 28
Translator goal facts: 5
Translator mutex groups: 5
Translator total mutex groups size: 15
Translator operators: 26
Translator axioms: 0
Translator task size: 158
Translator peak memory: 39512 KB
Writing output... [0.000s CPU, 0.001s wall-clock]
Done! [0.010s CPU, 0.026s wall-clock]
translate exit code: 0

INFO     Running search (release).
INFO     search stdin: output.sas
INFO     search time limit: None
INFO     search memory limit: None
INFO     search command line string: /src/fd/builds/release/bin/downward --evaluator 'hlm=lmcount(lm_factory=lm_rhw(reasonable_orders=true),transform=adapt_costs(one),pref=false)' --evaluator 'hff=ff(transform=adapt_costs(one))' --search 'lazy_greedy([hff,hlm],preferred=[hff,hlm],cost_type=one,reopen_closed=false)' --internal-plan-file sas_plan < output.sas
[t=3.3316e-05s, 55868 KB] reading input...
[t=0.000292768s, 55868 KB] done reading input!
[t=0.0017049s, 56132 KB] Initializing landmarks count heuristic...
[t=0.0017789s, 56132 KB] Initializing Exploration...
[t=0.00182834s, 56132 KB] Generating landmarks using the RPG/SAS+ approach
approx. reasonable orders
[t=0.00211947s, 56132 KB] approx. obedient reasonable orders
[t=0.00219349s, 56132 KB] Removed 0 reasonable or obedient reasonable orders
[t=0.00232819s, 56132 KB] Landmarks generation time: 0.000695546s
[t=0.00247778s, 56132 KB] Discovered 23 landmarks, of which 0 are disjunctive and 0 are conjunctive.
[t=0.00250923s, 56132 KB] 56 edges
[t=0.00260141s, 56132 KB] Simplifying 36 unary operators... done! [34 unary operators]
[t=0.00267592s, 56132 KB] time to simplify: 0.00010229s
[t=0.00271s, 56132 KB] Initializing additive heuristic...
[t=0.00272773s, 56132 KB] Initializing FF heuristic...
[t=0.00280281s, 56132 KB] Building successor generator...done!
[t=0.00291228s, 56132 KB] peak memory difference for successor generator creation: 0 KB
[t=0.0029306s, 56132 KB] time for successor generation creation: 1.4895e-05s
[t=0.0029509s, 56132 KB] Variables: 7
[t=0.002968s, 56132 KB] FactPairs: 28
[t=0.00300911s, 56132 KB] Bytes per state: 4
[t=0.00314067s, 56132 KB] Conducting lazy best first search, (real) bound = 2147483647
[t=0.00322851s, 56132 KB] 7 initial landmarks, 5 goal landmarks
[t=0.00329399s, 56132 KB] New best heuristic value for lmcount(lm_factory = lm_rhw(reasonable_orders = true), transform = adapt_costs(one), pref = false): 16
[t=0.00336087s, 56132 KB] New best heuristic value for ff(transform = adapt_costs(one)): 16
[t=0.0034711s, 56132 KB] g=0, 1 evaluated, 0 expanded
[t=0.00349898s, 56132 KB] Initial heuristic value for lmcount(lm_factory = lm_rhw(reasonable_orders = true), transform = adapt_costs(one), pref = false): 16
[t=0.0035174s, 56132 KB] Initial heuristic value for ff(transform = adapt_costs(one)): 16
[t=0.00356245s, 56132 KB] New best heuristic value for ff(transform = adapt_costs(one)): 15
[t=0.00361526s, 56132 KB] g=2, 4 evaluated, 3 expanded
[t=0.00365333s, 56132 KB] New best heuristic value for lmcount(lm_factory = lm_rhw(reasonable_orders = true), transform = adapt_costs(one), pref = false): 15
[t=0.00368052s, 56132 KB] New best heuristic value for ff(transform = adapt_costs(one)): 14
[t=0.00369995s, 56132 KB] g=3, 5 evaluated, 4 expanded
[t=0.00372705s, 56132 KB] New best heuristic value for lmcount(lm_factory = lm_rhw(reasonable_orders = true), transform = adapt_costs(one), pref = false): 14
[t=0.00374793s, 56132 KB] New best heuristic value for ff(transform = adapt_costs(one)): 13
[t=0.00376501s, 56132 KB] g=4, 6 evaluated, 5 expanded
[t=0.00382926s, 56132 KB] New best heuristic value for ff(transform = adapt_costs(one)): 12
[t=0.00389949s, 56132 KB] g=7, 11 evaluated, 10 expanded
[t=0.00396191s, 56132 KB] New best heuristic value for ff(transform = adapt_costs(one)): 11
[t=0.00399251s, 56132 KB] g=9, 15 evaluated, 14 expanded
[t=0.00404746s, 56132 KB] New best heuristic value for lmcount(lm_factory = lm_rhw(reasonable_orders = true), transform = adapt_costs(one), pref = false): 13
[t=0.00408266s, 56132 KB] g=10, 16 evaluated, 15 expanded
[t=0.00413391s, 56132 KB] New best heuristic value for ff(transform = adapt_costs(one)): 10
[t=0.00418388s, 56132 KB] g=11, 17 evaluated, 16 expanded
[t=0.00429389s, 56132 KB] New best heuristic value for lmcount(lm_factory = lm_rhw(reasonable_orders = true), transform = adapt_costs(one), pref = false): 9
[t=0.00433754s, 56132 KB] g=14, 20 evaluated, 19 expanded
[t=0.00450626s, 56132 KB] New best heuristic value for ff(transform = adapt_costs(one)): 9
[t=0.0045713s, 56132 KB] g=15, 22 evaluated, 21 expanded
[t=0.00462251s, 56132 KB] New best heuristic value for ff(transform = adapt_costs(one)): 8
[t=0.00464595s, 56132 KB] g=16, 24 evaluated, 23 expanded
[t=0.0046794s, 56132 KB] New best heuristic value for lmcount(lm_factory = lm_rhw(reasonable_orders = true), transform = adapt_costs(one), pref = false): 8
[t=0.00470439s, 56132 KB] g=17, 25 evaluated, 24 expanded
[t=0.00475116s, 56132 KB] New best heuristic value for lmcount(lm_factory = lm_rhw(reasonable_orders = true), transform = adapt_costs(one), pref = false): 6
[t=0.00477212s, 56132 KB] g=18, 29 evaluated, 28 expanded
[t=0.0047989s, 56132 KB] New best heuristic value for ff(transform = adapt_costs(one)): 7
[t=0.00481895s, 56132 KB] g=19, 30 evaluated, 29 expanded
[t=0.00486657s, 56132 KB] New best heuristic value for ff(transform = adapt_costs(one)): 6
[t=0.00491691s, 56132 KB] g=21, 34 evaluated, 33 expanded
[t=0.00495477s, 56132 KB] New best heuristic value for lmcount(lm_factory = lm_rhw(reasonable_orders = true), transform = adapt_costs(one), pref = false): 5
[t=0.00497537s, 56132 KB] New best heuristic value for ff(transform = adapt_costs(one)): 5
[t=0.00499205s, 56132 KB] g=22, 35 evaluated, 34 expanded
[t=0.00502888s, 56132 KB] New best heuristic value for lmcount(lm_factory = lm_rhw(reasonable_orders = true), transform = adapt_costs(one), pref = false): 3
[t=0.00504885s, 56132 KB] New best heuristic value for ff(transform = adapt_costs(one)): 4
[t=0.00506652s, 56132 KB] g=25, 38 evaluated, 37 expanded
[t=0.00510353s, 56132 KB] New best heuristic value for lmcount(lm_factory = lm_rhw(reasonable_orders = true), transform = adapt_costs(one), pref = false): 2
[t=0.00512443s, 56132 KB] New best heuristic value for ff(transform = adapt_costs(one)): 3
[t=0.0051414s, 56132 KB] g=28, 41 evaluated, 40 expanded
[t=0.0051664s, 56132 KB] New best heuristic value for ff(transform = adapt_costs(one)): 2
[t=0.00518549s, 56132 KB] g=29, 42 evaluated, 41 expanded
[t=0.00521135s, 56132 KB] New best heuristic value for lmcount(lm_factory = lm_rhw(reasonable_orders = true), transform = adapt_costs(one), pref = false): 1
[t=0.00523692s, 56132 KB] New best heuristic value for ff(transform = adapt_costs(one)): 1
[t=0.00525755s, 56132 KB] g=30, 43 evaluated, 42 expanded
[t=0.005283s, 56132 KB] Solution found!
[t=0.00530313s, 56132 KB] Actual search time: 0.00204751s
move ambulance1 loc2 loc1 (1)
pick ambulance1 patient1 loc1 (1)
move ambulance1 loc1 loc2 (1)
move ambulance1 loc2 loc3 (1)
move ambulance1 loc3 loc6 (1)
move ambulance1 loc6 loc7 (1)
drop ambulance1 patient1 loc7 (1)
move ambulance1 loc7 loc5 (1)
pick ambulance1 patient4 loc5 (1)
move ambulance1 loc5 loc4 (1)
move ambulance1 loc4 loc3 (1)
move ambulance1 loc3 loc6 (1)
move ambulance1 loc6 loc7 (1)
drop ambulance1 patient4 loc7 (1)
move ambulance1 loc7 loc6 (1)
pick ambulance1 patient5 loc6 (1)
move ambulance1 loc6 loc7 (1)
drop ambulance1 patient5 loc7 (1)
move ambulance1 loc7 loc5 (1)
move ambulance1 loc5 loc4 (1)
pick ambulance1 patient3 loc4 (1)
move ambulance1 loc4 loc3 (1)
move ambulance1 loc3 loc6 (1)
move ambulance1 loc6 loc7 (1)
drop ambulance1 patient3 loc7 (1)
move ambulance1 loc7 loc6 (1)
move ambulance1 loc6 loc3 (1)
pick ambulance1 patient2 loc3 (1)
move ambulance1 loc3 loc6 (1)
move ambulance1 loc6 loc7 (1)
drop ambulance1 patient2 loc7 (1)
[t=0.00532178s, 56132 KB] Plan length: 31 step(s).
[t=0.00532178s, 56132 KB] Plan cost: 31
[t=0.00532178s, 56132 KB] Expanded 43 state(s).
[t=0.00532178s, 56132 KB] Reopened 0 state(s).
[t=0.00532178s, 56132 KB] Evaluated 44 state(s).
[t=0.00532178s, 56132 KB] Evaluations: 88
[t=0.00532178s, 56132 KB] Generated 123 state(s).
[t=0.00532178s, 56132 KB] Dead ends: 0 state(s).
[t=0.00532178s, 56132 KB] Number of registered states: 44
[t=0.00532178s, 56132 KB] Int hash set load factor: 44/64 = 0.6875
[t=0.00532178s, 56132 KB] Int hash set resizes: 6
[t=0.00532178s, 56132 KB] Search time: 0.00218273s
[t=0.00532178s, 56132 KB] Total time: 0.00532178s
Solution found.
Peak memory: 56132 KB
Remove intermediate file output.sas
search exit code: 0



---------
HSP
---------

parsing domain file "domain.pddl" done successfully
parsing problem file "problem.2.pddl" done successfully
java.lang.IllegalStateException: Instrumentation environment not initialised.

encoding problem done successfully (24 ops, 23 facts)
* starting A*
java.lang.IllegalStateException: Instrumentation environment not initialised.
java.lang.IllegalStateException: Instrumentation environment not initialised.
* A* succeeded

found plan as follows:

00: (    move ambulance1 loc2 loc1) [1]
01: (pick ambulance1 patient1 loc1) [1]
02: (    move ambulance1 loc1 loc2) [1]
03: (    move ambulance1 loc2 loc3) [1]
04: (    move ambulance1 loc3 loc6) [1]
05: (    move ambulance1 loc6 loc7) [1]
06: (drop ambulance1 patient1 loc7) [1]
07: (    move ambulance1 loc7 loc6) [1]
08: (    move ambulance1 loc6 loc3) [1]
09: (pick ambulance1 patient2 loc3) [1]
10: (    move ambulance1 loc3 loc6) [1]
11: (    move ambulance1 loc6 loc7) [1]
12: (drop ambulance1 patient2 loc7) [1]
13: (    move ambulance1 loc7 loc6) [1]
14: (pick ambulance1 patient5 loc6) [1]
15: (    move ambulance1 loc6 loc7) [1]
16: (drop ambulance1 patient5 loc7) [1]
17: (    move ambulance1 loc7 loc5) [1]
18: (    move ambulance1 loc5 loc4) [1]
19: (pick ambulance1 patient3 loc4) [1]
20: (    move ambulance1 loc4 loc5) [1]
21: (    move ambulance1 loc5 loc7) [1]
22: (drop ambulance1 patient3 loc7) [1]
23: (    move ambulance1 loc7 loc5) [1]
24: (pick ambulance1 patient4 loc5) [1]
25: (    move ambulance1 loc5 loc7) [1]
26: (drop ambulance1 patient4 loc7) [1]

plan total cost: 27.00


time spent:       0.17 seconds parsing
                  0.07 seconds encoding
                  0.06 seconds searching
                  0.29 seconds total time

memory used:     -0.00 MBytes for problem representation
                 -0.00 MBytes for searching
                 -0.00 MBytes total